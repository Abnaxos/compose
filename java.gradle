/*
 *  Copyright (c) 2019 Raffael Herzog
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'jacoco'

//noinspection UnnecessaryQualifiedReference
apply plugin: local.DependencySets

archivesBaseName = buildArtifactBaseName(project)
sourceCompatibility = '11'

ext.slf4jVersion = '1.7.26'

dependencySets {
    slf4j '1.7.26', 'org.slf4j',
          'slf4j-api'
    log4j '2.12.1', 'org.apache.logging.log4j',
          'log4j-slf4j-impl', 'log4j-jul'
    jul slf4j.version, slf4j.group,
          'slf4j-jdk14'
    vavr '0.10.1', 'io.vavr', 'vavr'
    immutables '2.8.2', 'org.immutables', 'value-annotations', 'encode',
               [group: 'org.immutables.vavr', name: 'vavr-encodings', version: '0.6.0',
                configure: {exclude module: 'vavr'; exclude group: 'org.immutables'}]
    immutablesProc immutables.version, immutables.group,
                   'value-processor', immutables
    nullity '3.0.2', 'com.google.code.findbugs', 'jsr305'
    tsconfig '1.3.3', 'com.typesafe', 'config'
    gson '2.8.5', 'com.google.code.gson', 'gson'
    gsonVavr '0.10.0', vavr.group, 'vavr-gson'
    gsonImmutables immutables.version, immutables.group, 'gson'
}

configurations {
    // TODO (2019-12-10) workaround, remove when https://youtrack.jetbrains.com/issue/IDEA-228522 is fixed
    //annotationProcessor.extendsFrom compile, compileOnly

    testCompileOnly.extendsFrom compileOnly
    testRuntimeOnly.extendsFrom runtimeOnly
    spockReports
}

dependencies {
    compileOnly dependencySets.nullity

    testImplementation group: 'org.spockframework', name: 'spock-core', version: '1.2-groovy-2.5', {
        exclude group: 'org.codehaus.groovy'
    }
    testImplementation group: 'cglib', name: 'cglib-nodep', version: '3.2.10'
    testImplementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.6'

    testRuntimeOnly dependencySets.log4j
    testRuntimeOnly project(':shared-rt:log4j-config')

    spockReports group: 'com.athaydes', name: 'spock-reports', version: '1.6.2', {
        transitive false
    }
}

ext.publishToMaven = true
ext.noMaven = { ext.publishToMaven = false }

afterEvaluate {
    if (ext.publishToMaven) {
        apply from: rootProject.file('maven.gradle')
    }
}


afterEvaluate {
    tasks.withType(Test).each { t ->
        def sourceRoots = (sourceSets.test.groovy.srcDirs + sourceSets.main.groovy.srcDirs).join(File.pathSeparator)
        t.jvmArgs += [
            "-Dcom.athaydes.spockframework.report.showCodeBlocks='false'",
            "-Dcom.athaydes.spockframework.report.testSourceRoots=$sourceRoots",
            "-Dcom.athaydes.spockframework.report.outputDir=$rootReportsDir${File.separator}spock-reports"]
        t.classpath = files(t.classpath, configurations.spockReports)
    }
}
jacoco {
    toolVersion = jacocoVersion
}
task registerJacoco() {
    doFirst {
        rootProject.tasks.jacocoReport.with {
            executionData.from fileTree("$buildDir/jacoco", {include '**/*.exec'}).files
            classDirectories.from sourceSets.main.output.classesDirs
            sourceDirectories.from sourceSets.main.java.sourceDirectories
        }
    }
}
afterEvaluate {
    test.finalizedBy registerJacoco
    registerJacoco.finalizedBy rootProject.jacocoReport
}

ext.enableMeld = {
    dependencies {
        annotationProcessor project(':tools:processor')
    }
}
ext.enableImmutables = {
    dependencies {
        compileOnly dependencySets.immutables
        annotationProcessor project(':util:immutables-proc')
    }
}
