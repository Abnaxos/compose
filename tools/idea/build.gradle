/*
 *  Copyright (c) 2019 Raffael Herzog
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

apply plugin: 'org.jetbrains.intellij'

sourceCompatibility = 8
targetCompatibility = 8

dependencies {
  compile project(':tools:model')
}

def sandboxDir = 'idea-sandbox'

intellij {
  pluginName = 'ch.raffael.compose'
  version = '191.6183.87' // 2019.1
  updateSinceUntilBuild = false
  type = 'IC'

  sandboxDirectory = "$sandboxDir/idea"

  //plugins = ['Groovy']
}

//noinspection GroovyAssignabilityCheck
task syncTestProject(type: Sync, group: 'intellij') {
  destinationDir = file("$sandboxDir/test-project")

  includeEmptyDirs = false
  preserve {
    include '**'
  }

  from(rootProject.projectDir) {
    include '*', 'gradle/**', 'buildSrc/**', '.idea/codeStyles/**',
            'modules/**/src/**', 'usecases/**/src/**'
    exclude 'settings.gradle', '**/idea-sandbox/**', '.gitignore', 'java.gradle'
  }
  from(rootProject.projectDir) {
    include 'modules/**/build.gradle', 'usecases/**/build.gradle', 'java.gradle'
    filter {line ->
      if (line =~ /\bproject\s*\(\s*':(api|util|tools)/ ) return null
      return line
    }
  }

  doLast {
    file("$sandboxDir/test-project/settings.gradle").text =
        "include 'modules:core', 'modules:http', 'modules:http:jetty', 'usecases:logging', 'usecases:hello-http'"
    def appendStr = new StringWriter()
    def append = new PrintWriter(appendStr)
    append.println """dependencies {"""
    append.println """  compile dependencySets.vavr"""
    [':api', ':util', ':tools:model', ':tools:processor'].each {
      append.println """  compile(files('${project(it).jar.archivePath}'))"""
    }
    [':tools:processor'].each {prjPath ->
      project(prjPath).configurations.compile.allDependencies
          .findAll {it instanceof ExternalModuleDependency}
          .each {append.println "  compile group: '$it.group', name: '$it.name', version: '$it.version'"}
    }
    append.println """}"""
    append.close()
    file("$sandboxDir/test-project/java.gradle").append("\n\n$appendStr")
  }

}
//tasks.runIde.dependsOn tasks.syncTestProject

idea.module {
  excludeDirs += file(sandboxDir)
}
