/*
 *  Copyright (c) 2019 Raffael Herzog
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

apply plugin: 'org.jetbrains.intellij'

noMaven()
tasks.registerJacoco.enabled = false

dependencies {
  implementation project(':tools:model')
}

def sandboxDir = 'idea-sandbox'

intellij {
  pluginName = 'ch.raffael.compose'
  version = '192.5728.98' // 2019.2
  updateSinceUntilBuild = false
  type = 'IC'
  plugins = [
      'java', 'Groovy', 'gradle'
  ]

  sandboxDirectory = "$sandboxDir/idea"

  //plugins = ['Groovy']
}

//noinspection GroovyAssignabilityCheck
task syncTestProject(type: Sync, group: 'intellij') {
  destinationDir = file("$sandboxDir/test-project")

  includeEmptyDirs = false
  preserve {
    include '**'
  }

  from(rootProject.projectDir) {
    include '*', 'gradle/**', 'buildSrc/**', '.idea/codeStyles/**',
            'library/**/src/**', 'shared-rt/**/src/**', 'usecases/**/src/**'
    exclude 'settings.gradle', '**/idea-sandbox/**', '.gitignore', 'java.gradle'
  }
  from(rootProject.projectDir) {
    include 'features/**/build.gradle', 'usecases/**/build.gradle', 'shared-rt/**/build.gradle', 'java.gradle'
    filter {line ->
      if (line =~ /\bproject\s*\(\s*':(api|util|logging|tools)/ ) return null
      return line
    }
  }
  into('test-cases/src/main/java') {
    from project(':tools:processor').file('src/test/cases')
    from(project(':tools:processor').file('src/test/groovy')) {
      include '**/Marker.groovy'
    }
  }

  doLast {
    file("$sandboxDir/test-project/settings.gradle").text =
        """include 'shared-rt:log4j-config',
  'library:base', 'library:codec', 'library:http-undertow',
  'usecases:hello-http',
  'test-cases'"""
    def appendStr = new StringWriter()
    //noinspection GroovyAssignabilityCheck
    def append = new PrintWriter(appendStr)
    append.println """dependencies {"""
    append.println """  compile dependencySets.vavr"""
    [':api', ':util', ':logging', ':tools:model', ':tools:processor'].each {
      append.println """  compile(files('${project(it).jar.archivePath}'))"""
    }
    [':tools:processor'].each {prjPath ->
      project(prjPath).configurations.compile.allDependencies
          .findAll {it instanceof ExternalModuleDependency}
          .each {append.println "  compile group: '$it.group', name: '$it.name', version: '$it.version'"}
    }
    append.println '  compile dependencySets.slf4j'
    append.println '  compile dependencySets.log4j'
    append.println """}"""
    append.close()
    file("$sandboxDir/test-project/java.gradle").append("\n\n$appendStr")
    file("$sandboxDir/test-project/test-cases/build.gradle").text = """enableCompose()
dependencies {
    compile '${dependencySets.tsconfig[0].group}:${dependencySets.tsconfig[0].name}:$dependencySets.tsconfig.version'
}
"""
  }

}
//tasks.runIde.dependsOn tasks.syncTestProject

idea.module {
  excludeDirs += file(sandboxDir)
}
