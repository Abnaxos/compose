/*
 *  Copyright (c) 2019 Raffael Herzog
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.4.9'
        classpath 'org.ajoberstar:grgit:1.7.2'
    }
}

@SuppressWarnings("UnnecessaryQualifiedReference")
def retrieveVersionFromGit() {
    org.ajoberstar.grgit.Grgit git
    try {
        //noinspection GroovyAssignabilityCheck
        git = org.ajoberstar.grgit.Grgit.open(dir: project.rootDir)
    } catch (e) {
        logger.warn "Cannot open git repository: $e"
        return 'DEVELOP-SNAPSHOT'
    }
    String currentBranch = git.branch.current.name

    def gitVersion
    //noinspection GroovyAssignabilityCheck
    if (currentBranch == 'master') {
        List<String> candidates = git.tag.list().findAll({it.commit==git.head()})*.name?.findAll({it =~ /\d+(\.\d+)+/})
        if (candidates.size() != 1) {
            throw new GradleException("No distinct version tag found; candidates: $candidates")
        }
        gitVersion = candidates[0]
    } else {
        //noinspection GroovyAssignabilityCheck
        gitVersion = (~/.*\/(\d+(\.\d+)+)/).matcher(currentBranch).with {
            matches() ? "${group(1)}-SNAPSHOT" : 'DEVELOP-SNAPSHOT'
        }
    }
    logger.quiet "Version from git: $gitVersion"
    return gitVersion
}
def versionFromGit = retrieveVersionFromGit()

buildDir = file('target')

if (rootProject.properties['localPublishing'] == 'true') {
    ext.localMvn = file("$buildDir/mvn")
} else {
    ext.localMvn = null
}

allprojects {
    apply plugin: 'idea'

    buildDir = 'target'
    group = 'ch.raffael.compose'
    version = versionFromGit

    repositories { mavenCentral() }

    if (file('src/main/java').isDirectory()) {
        apply from: "$rootProject.projectDir/java.gradle"
    }

    idea.module {
        name = buildArtifactBaseName(project)
        sourceDirs += file('out/production/classes/generated')
        testSourceDirs += file('out/test/classes/generated_tests')
    }

}

task prepareLocalMvn() {
    doFirst {
        logger.quiet "Deleting previous local mvn repo: $localMvn"
        delete localMvn
        mkdir localMvn
    }
}

def buildArtifactBaseName(Project prj) {
    if (prj == rootProject) {
        return rootProject.name
    } else {
        return buildArtifactBaseName(prj.parent) + '-' + ([
            ':services': 'svc'
        ].get(prj.path) ?: prj.name)
    }
}

@SuppressWarnings("unused")
def generatedOutputDir(Project prj, String generator, String srcSet) {
    return prj.file("$prj.buildDir/generated/no-ide/$generator/$srcSet")
}
