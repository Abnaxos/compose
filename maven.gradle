/*
 *  Copyright (c) 2020 Raffael Herzog
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

if (!ext.publishToMaven) {
  return
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

artifacts {
  archives sourcesJar, javadocJar
}

publishing {
  repositories {
    maven {
      url = version.endsWith('-SNAPSHOT')
          ? 'https://oss.sonatype.org/content/repositories/snapshots/'
          : 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
      def u = rootProject.properties.ossrhUsername
      def p = rootProject.properties.ossrhPassword
      if (u != null && p != null) {
        credentials {
          username = u
          password = p
        }
      }
      else {
        def missing = []
        if (u == null) {
          missing.add 'ossrhUsername'
        }
        if (p == null) {
          missing.add 'ossrhPassword'
        }
        logger.quiet "Properties ${missing.join('/')} not set, maven publication will probably fail"
      }
    }
  }
  publications {
    mavenJava(MavenPublication) {
      from components.java
      artifact tasks.sourcesJar
      artifact tasks.javadocJar
      pom {
        //noinspection GroovyAssignabilityCheck
        name = archivesBaseName
        url = 'https://github.com/Abnaxos/meldioc'
        artifactId = archivesBaseName
        packaging = 'jar'
        // optionally artifactId can be defined here
        description = 'IoC'
        //url 'https://github.com/Abnaxos/meldioc'

        scm {
          connection = 'scm:git:https://github.com/Abnaxos/meldioc.git'
          developerConnection = 'scm:git:git@github.com:Abnaxos/meldioc.git'
          url = 'https://github.com/Abnaxos/meldioc'
        }

        licenses {
          license {
            //noinspection GroovyAssignabilityCheck
            name = 'MIT'
            url = 'https://github.com/Abnaxos/meldioc/blob/develop/LICENSE.txt'
          }
        }

        developers {
          developer {
            id = 'abnaxos'
            //noinspection GroovyAssignabilityCheck
            name = 'Raffael Herzog'
            email = 'herzog@raffael.ch'
          }
        }
      }
    }
  }
}

signing {
  useGpgCmd()
  sign publishing.publications.mavenJava
}
tasks.withType(Sign) {
  //doFirst {
  //  println gradle.taskGraph.allTasks
  //  println gradle.taskGraph.hasTask(tasks.publishMavenJavaPublicationToMavenRepository)
  //}
  onlyIf {
    gradle.taskGraph.hasTask(tasks.publishMavenJavaPublicationToMavenRepository)
  }
}
